version: '2'
services:
  backend:
    restart: always
    build:
      dockerfile: ./dockerfiles/django/Dockerfile
      context: .
    ports:
      - 8000:8000
    volumes:
      - ./backend:/app/
    environment:
      DJANGO_SETTINGS_MODULE: settings.development
      AWS_ACCESS_KEY: xyz
      AWS_SECRET_KEY: xyz
      BASE_URL: xyz
      S3_REGION_NAME: xyz
      ELASTICSEARCH_HOST: elasticsearch:9200
    command: sh -c "python manage.py collectstatic --no-input && python manage.py migrate && uwsgi --ini uwsgi.ini"
    depends_on:
      - app-db
      - elasticsearch
  redis:
    restart: always
    image: "redis:alpine"
  celery:
    restart: always
    build:
      dockerfile: ./dockerfiles/django/Dockerfile
      context: .
    command: celery -A settings.celery.app worker -l info
    volumes:
      - ./backend:/app/
    depends_on:
      - redis
      - backend
  app-db:
    restart: always
    image: postgres:9.6
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: secret_pass
      POSTGRES_USER: app
      POSTGRES_DB: app
    volumes:
      - ./postgres:/var/lib/postgresql/data
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - default
  #nginx:
  #  restart: always
  #  image: nginx:1.13-alpine
  #  ports:
  #    - 80:80
  #    - 443:443
  #  volumes:
  #    - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
  #    - ./backend/media:/app/media
  #    - ./backend/static:/app/static
  #  networks:
  #    - default
  #  environment:
  #    NGINX_UPLOAD_SIZE: 100M
  #    NGINX_API_HOST: backend:8000
  #    NGINX_DOMAIN: localhost
  #  command: /bin/sh -c "envsubst '$$NGINX_API_HOST $$NGINX_UPLOAD_SIZE $$NGINX_WEB_HOST  $$NGINX_DOMAIN $$NGINX_SSL_FULLCHAIN $$NGINX_SSL_KEY' < /etc/nginx/nginx.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
  #  depends_on:
  #    - backend